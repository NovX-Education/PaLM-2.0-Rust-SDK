//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "recipe")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub public_key: Option<String>,
    pub recipe_name: Option<String>,
    pub common_name: Option<String>,
    pub recipe_link: Option<String>,
    pub last_updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "custom(\"vector\")", nullable)]
    pub embedding: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::recipe_ingredients_linker::Entity")]
    RecipeIngredientsLinker,
}

impl Related<super::recipe_ingredients_linker::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecipeIngredientsLinker.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
